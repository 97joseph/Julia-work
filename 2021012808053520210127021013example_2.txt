# P-1 MCS 471 due Fri 5 Feb 2021 : laguerremethod.jl

import Random # to fix the seed of the random numbers
using Printf  # for formatted printing of numbers
"""
This simple program illustrates the method of Laguerre
to approximate roots of polynomials in one variable.

To evaluate polynomials, we use evalpoly(x, p),
where x is the value for the input and p[1], p[2], ...
are the coefficients of the polynomial p,
in ascending order of the power of x.  The evalpoly(x, p) 
returns p[1] + p[2]*x + p[3]*x^2 + ... + p[d+1]*x^d,
where d is the degree of p, d = size(p, 1) - 1.

The default type of each coefficient of p is Complex{BigFloat},
complex numbers of arbitrary precision.
The function precision(BigFloat) returns the precision in bits
currently in use.  The default value is 256.
With setprecision(nb), the precision is set to as many bits as
the value of nb.

Three functions are defined: diffpoly, laguerre, and runlaguerre.
"""

"""
The function diffpoly returns the coefficients of the derivative
of the polynomial with coefficients in c. \\
The zero polynomial is represented as an array of one zero.

EXAMPLE : \\
    c = Array([Complex{BigFloat}(i,i) for i = 1:3]) \\
    diffpoly(c)
"""
function diffpoly(c::Array{Complex{BigFloat},1})
    sz = size(c, 1)
    if sz < 2
        result = Array([Complex{BigFloat}(0)])
    else
        result = Array([Complex{BigFloat}(0) for _ = 1:sz-1])
        for i=2:sz
            result[i-1] = (i-1)*c[i]
        end
   end
   return result
end

"""
The function laguerre applies the method of Laguerre.

ON ENTRY : (p, d1p, d2p, z0, dxtol, pxtol, maxit, verbose)         \\
  p        are the coefficients of a polynomial in one variable    \\
  d1p      are the coefficients of the first derivative of p       \\
  d2p      are the coefficients of the second derivative of p      \\
  z0       is an approximation for the root                        \\
  dxtol    is the tolerance on the forward error                   \\
  pxtol    is the tolerance on the backward error                  \\
  maxit    is the maximum number of iterations                     \\
  verbose  is the verbose flag, if true, writes one line each step
                                                                 
ON RETURN : (root, absdx, abspx, nbrit, fail)                      \\
  root     is an approximation for the root                        \\
  absdx    is the estimated forward error                          \\
  abspx    is the estimated backward error                         \\
  nbrit    is the number of iterations                             \\
  fail     is true if tolerances not reached,                      \\
           false otherwise.
"""
function laguerre(p::Array{Complex{BigFloat},1},
                  d1p::Array{Complex{BigFloat},1},
                  d2p::Array{Complex{BigFloat},1},
                  z0::Complex{BigFloat},
                  dxtol::Float64=1.0e-8,
                  pxtol::Float64=1.0e-8,
                  maxit::Int64=10,
                  verbose::Bool=true)
    root = z0; dx = 1; pval = 1
    degm1 = size(p, 1) - 2 # degree of p minus one
    deg = degm1 + 1
    if verbose
        title = "       real(root)             imag(root)"
        println("step : $title          |dx|     |p(x)|")
        stri = @sprintf("%3d", 0)
        strx = @sprintf("%.16e  %.16e", real(root), imag(root))
        println("$stri  : $strx")
    end
    for i=1:maxit
        pval = evalpoly(root, p)
        if abs(pval) < pxtol
            if verbose
                stri = string(i-1)
                println("succeeded after $stri step(s)")
            end
            return (root, abs(dx), abs(pval), i, false)
        end
        d1val = evalpoly(root, d1p)
        d2val = evalpoly(root, d2p)
        Lroot = d1val/pval
        Mroot = Lroot^2 - d2val/pval
        valsqrt = sqrt(degm1*(deg*Mroot - Lroot^2))
        yplus = Lroot + valsqrt
        yminus = Lroot - valsqrt
        if abs(yplus) > abs(yminus)
            dx = deg/yplus
        else
            dx = deg/yminus
        end
        root = root - dx
        pval = evalpoly(root, p)
        if verbose
            stri = @sprintf("%3d", i)
            strx = @sprintf("%.16e  %.16e", real(root), imag(root))
            strdx = @sprintf("%.2e", abs(dx))
            strpx = @sprintf("%.2e", abs(pval))
            println("$stri  : $strx  $strdx  $strpx")
        end
        if abs(dx) < dxtol
            if verbose
                stri = string(i)
                println("succeeded after $stri step(s)")
            end
            return (root, abs(dx), abs(pval), i, false)
        end
    end
    strN = string(maxit)
    println("failed requirements after $strN step(s)")
    return (root, abs(dx), abs(pval), maxit, true)
end

"""
The function runlaguerre demonstrates the method of Laguerre
on the polynomial (x-1)*(x-2) = x^2 - 3*x + 2.
"""
function runlaguerre()
    c1 = Complex{BigFloat}(2)
    c2 = Complex{BigFloat}(-3)
    c3 = Complex{BigFloat}(1)
    p = [c1, c2, c3]
    d1p = diffpoly(p)
    d2p = diffpoly(d1p)
    # we fix the seed for the random number generator
    Random.seed!(123);
    z0 = Complex{BigFloat}(rand(),rand())
    println("running on x^2 - 3*x + 2 ...")
    laguerre(p,d1p,d2p,z0)
    p = [Complex{BigFloat}(rand(), rand()) for _ = 1:10]
    d1p = diffpoly(p)
    d2p = diffpoly(d1p)
    z0 = Complex{BigFloat}(rand(),rand())
    println("running on a random polynomial ...")
    laguerre(p,d1p,d2p,z0,1.0e-60, 1.0e-60)
end

runlaguerre()